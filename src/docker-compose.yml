version: '3.8'

services:
  mongo1:
    image: mongo
    
  mongo2:
    image: mongo
    
  mongo3:
    image: mongo
    
  discountdb:
    image: postgres
    
  #orderdb:
    #image: mcr.microsoft.com/mssql/server
    
  rabbitmq:
    image: rabbitmq:3-management
  
  #portainer:
    #image: portainer/portainer-ce
    
  #elasticsearch:
    #image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
    
  #kibana:
    #image: docker.elastic.co/kibana/kibana:7.9.2
  
  catalog.api:
    image: ${DOCKER_REGISTRY-}catalogapi
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
      
  basket.api:
    image: ${DOCKER_REGISTRY-}basketapi
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile
      
  discount.api:
    image: ${DOCKER_REGISTRY-}discountapi
    build:
      context: .
      dockerfile: Services/Discount/Discount.API/Dockerfile
  
  discount.grpc:
    image: ${DOCKER_REGISTRY-}discountgrpc
    build:
      context: .
      dockerfile: Services/Discount/Discount.Grpc/Dockerfile
      
  ordering.api:
    image: ${DOCKER_REGISTRY-}orderingapi
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile
      
  inventory.api:
    image: ${DOCKER_REGISTRY-}inventoryapi
    build:
      context: .
      dockerfile: Services/Inventory/Inventory.API/Dockerfile
      
  payment.api:
    image: ${DOCKER_REGISTRY-}paymentapi
    build:
      context: .
      dockerfile: Services/Payment/Payment.API/Dockerfile
      
  bff.web:
    image: ${DOCKER_REGISTRY-}bff
    build:
      context: .
      dockerfile: ApiGateways/BFF.Web/BFF.Web/Dockerfile
      
  shopping.aggregator:
    image: ${DOCKER_REGISTRY-}shoppingaggregator
    build:
      context: .
      dockerfile: ApiGateways/Shopping.Aggregator/Dockerfile

volumes:
  mongo_data:
  portainer_data:
  postgres_data:
  elasticsearch-data:
